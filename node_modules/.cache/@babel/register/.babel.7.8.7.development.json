{
  "{\"sourceRoot\":\"/Users/erichrobinson/Projects/reddit-notifier\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/erichrobinson/Projects/reddit-notifier\",\"filename\":\"/Users/erichrobinson/Projects/reddit-notifier/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/erichrobinson/Projects/reddit-notifier\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.8.7": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/erichrobinson/Projects/reddit-notifier",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/erichrobinson/Projects/reddit-notifier",
      "filename": "/Users/erichrobinson/Projects/reddit-notifier/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/erichrobinson/Projects/reddit-notifier",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/erichrobinson/Projects/reddit-notifier/index.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/erichrobinson/Projects/reddit-notifier/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/erichrobinson/Projects/reddit-notifier",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _mongodb = require(\"mongodb\");\n\nvar _cron = require(\"cron\");\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _mail = _interopRequireDefault(require(\"@sendgrid/mail\"));\n\nvar _dotenv = _interopRequireDefault(require(\"dotenv\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n_mongodb.MongoClient.connect('mongodb://localhost:27017/', function (err, db) {\n  _dotenv[\"default\"].config();\n\n  _mail[\"default\"].setApiKey(process.env.SENDGRID_API_KEY); // Basic reddit implementation\n  // async function getPosts() {\n  //   try {\n  //     const response = await axios.get('https://reddit.com/r/nature/top.json?count=3');\n  //     console.log(response.data.data.children);\n  //   } catch (error) {\n  //     console.error(error);\n  //   }\n  // }\n  // getPosts()\n  // Basic cron functionality. Need to hook up to SendGrid API\n  // get all active users\n  // for each user => get channels\n  // for each channel => get top posts\n  // send data through sendgrids\n  // var job = new CronJob('* * * * * *', function() {\n  //   console.log('You will see this message every second');\n  // }, null, true, 'America/Los_Angeles');\n  // job.start();\n\n\n  var redditNotifier = db.db('reddit-notifier');\n  var app = (0, _express[\"default\"])();\n  var port = 3000;\n  app.listen(port, function () {\n    return console.log(\"Reddit Notifier listening on port: \".concat(port));\n  });\n  redditNotifier.collection('users').ensureIndex({\n    name: 1\n  }, {\n    unique: true\n  });\n  app.post('/users/:user', /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(req, res) {\n      var user, response;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              user = req.params.user;\n              response = {};\n              _context.prev = 2;\n              _context.next = 5;\n              return redditNotifier.collection('users').insertOne({\n                name: user,\n                active: true\n              });\n\n            case 5:\n              response.status = 200;\n              response.message = \"Created user \".concat(user);\n              _context.next = 14;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](2);\n              console.error(\"Error creating user: \".concat(_context.t0));\n              response.status = 500;\n              response.message = _context.t0.message;\n\n            case 14:\n              res.status(response.status).json({\n                'message': response.message\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 9]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  app.put('/users/:user', /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(req, res) {\n      var user, active, update;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              user = req.params.user;\n              active = !req.query.active || req.query.active.toLowerCase() === 'true' ? true : false;\n              _context2.prev = 2;\n              _context2.next = 5;\n              return redditNotifier.collection('users').updateOne({\n                name: user\n              }, {\n                $set: {\n                  active: active\n                }\n              });\n\n            case 5:\n              update = _context2.sent;\n              console.log(update);\n              _context2.next = 12;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](2);\n              console.error(\"Error updating user: \".concat(user, \". \").concat(_context2.t0));\n\n            case 12:\n              res.sendStatus(200);\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[2, 9]]);\n    }));\n\n    return function (_x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n  app.post('/users/:user/channels/:channel', /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(req, res) {\n      var user, channel, u;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              user = req.params.user;\n              channel = req.params.channel;\n              _context3.prev = 2;\n              _context3.next = 5;\n              return redditNotifier.collection('users').findOne({\n                name: user\n              });\n\n            case 5:\n              u = _context3.sent;\n\n              if (!u) {\n                _context3.next = 9;\n                break;\n              }\n\n              _context3.next = 9;\n              return redditNotifier.collection('channels').insertOne({\n                userId: u._id,\n                name: channel,\n                subscribed: true\n              });\n\n            case 9:\n              _context3.next = 14;\n              break;\n\n            case 11:\n              _context3.prev = 11;\n              _context3.t0 = _context3[\"catch\"](2);\n              console.error(\"Error adding channel: \".concat(channel, \" for user: \").concat(user));\n\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[2, 11]]);\n    }));\n\n    return function (_x5, _x6) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n  app.get('/users/:user/channels', /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(req, res) {\n      var user, u, channels;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              user = req.params.user;\n              _context4.next = 3;\n              return redditNotifier.collection('users').findOne({\n                name: user\n              });\n\n            case 3:\n              u = _context4.sent;\n              _context4.next = 6;\n              return redditNotifier.collection('channels').find({\n                userId: u._id\n              }).toArray();\n\n            case 6:\n              channels = _context4.sent;\n              console.log('channels', channels);\n              res.sendStatus(200);\n\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x7, _x8) {\n      return _ref4.apply(this, arguments);\n    };\n  }());\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "MongoClient",
        "connect",
        "err",
        "db",
        "dotenv",
        "config",
        "sgMail",
        "setApiKey",
        "process",
        "env",
        "SENDGRID_API_KEY",
        "redditNotifier",
        "app",
        "port",
        "listen",
        "console",
        "log",
        "collection",
        "ensureIndex",
        "name",
        "unique",
        "post",
        "req",
        "res",
        "user",
        "params",
        "response",
        "insertOne",
        "active",
        "status",
        "message",
        "error",
        "json",
        "put",
        "query",
        "toLowerCase",
        "updateOne",
        "$set",
        "update",
        "sendStatus",
        "channel",
        "findOne",
        "u",
        "userId",
        "_id",
        "subscribed",
        "get",
        "find",
        "toArray",
        "channels"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/erichrobinson/Projects/reddit-notifier",
      "sourcesContent": [
        "import express from 'express'\nimport { MongoClient } from 'mongodb'\nimport { CronJob } from 'cron'\nimport axios from 'axios'\nimport sgMail from '@sendgrid/mail'\nimport dotenv from 'dotenv'\n\nMongoClient.connect('mongodb://localhost:27017/', (err, db) => {\n\n  dotenv.config()\n  \n  \n  sgMail.setApiKey(process.env.SENDGRID_API_KEY);\n\n\n\n\n  // Basic reddit implementation\n  // async function getPosts() {\n  //   try {\n  //     const response = await axios.get('https://reddit.com/r/nature/top.json?count=3');\n  //     console.log(response.data.data.children);\n  //   } catch (error) {\n  //     console.error(error);\n  //   }\n  // }\n\n  // getPosts()\n\n  // Basic cron functionality. Need to hook up to SendGrid API\n  // get all active users\n  // for each user => get channels\n  // for each channel => get top posts\n  // send data through sendgrids\n  // var job = new CronJob('* * * * * *', function() {\n  //   console.log('You will see this message every second');\n  // }, null, true, 'America/Los_Angeles');\n  // job.start();\n\n  const redditNotifier = db.db('reddit-notifier')\n  const app = express()\n  const port = 3000\n\n  app.listen(port, () => console.log(`Reddit Notifier listening on port: ${port}`))\n\n  redditNotifier.collection('users').ensureIndex({ name: 1 }, { unique: true })\n\n  app.post('/users/:user', async (req, res) => {\n    const user = req.params.user\n    const response = {}\n    \n    try {\n      await redditNotifier.collection('users').insertOne({\n        name: user,\n        active: true\n      })\n      response.status = 200\n      response.message = `Created user ${user}`\n    }\n    catch(err) {\n      console.error(`Error creating user: ${err}`)\n      response.status = 500\n      response.message = err.message\n    }\n\n    res.status(response.status).json({\n      'message': response.message,\n    })\n  })\n\n  app.put('/users/:user', async (req, res) => {\n    const user = req.params.user\n    const active = (!req.query.active || req.query.active.toLowerCase() === 'true') ? true : false\n\n    try {\n      const update = await redditNotifier.collection('users').updateOne({ name: user }, { $set: { active } })\n      console.log(update)\n    }\n    catch(err) {\n      console.error(`Error updating user: ${user}. ${err}`)\n    }\n\n    res.sendStatus(200)\n  })\n\n  app.post('/users/:user/channels/:channel', async (req, res) => {\n    const user = req.params.user\n    const channel = req.params.channel\n\n    try {\n      const u = await redditNotifier.collection('users').findOne({ name: user })\n      // handle not finding a user\n      if(u) {\n        await redditNotifier.collection('channels').insertOne({\n          userId: u._id,\n          name: channel,\n          subscribed: true\n        })\n      }\n    }\n    catch(err) {\n      console.error(`Error adding channel: ${channel} for user: ${user}`)\n    }\n  })\n\n  app.get('/users/:user/channels', async (req, res) => {\n    const user = req.params.user\n    const u = await redditNotifier.collection('users').findOne({ name: user })\n    const channels = await redditNotifier.collection('channels').find({ userId: u._id }).toArray()\n    console.log('channels', channels)\n    res.sendStatus(200)\n  })\n})\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1583702261986
  }
}